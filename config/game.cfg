
///////////////////////////////////////////////////////////////////////////////
//  Standard Function Library                                                //
///////////////////////////////////////////////////////////////////////////////

getmaster     = [ listfilter i $arg1 [ismaster    $i] ]
getadmin      = [ listfilter i $arg1 [isadmin     $i] ]
getauth       = [ listfilter i $arg1 [isauth      $i] ]
getspectator  = [ listfilter i $arg1 [isspectator $i] ]
getignored    = [ listfilter i $arg1 [isignored   $i] ]
getbots       = [ listfilter i $arg1 [isai        $i] ]
getdead       = [ listfilter i $arg1 [isdead      $i] ]
getlagged     = [ listfilter i $arg1 [islagged    $i] ]
 
get!master    = [ listfilter i $arg1 [! (ismaster    $i)] ]
get!admin     = [ listfilter i $arg1 [! (isadmin     $i)] ]
get!auth      = [ listfilter i $arg1 [! (isauth      $i)] ]
get!spectator = [ listfilter i $arg1 [! (isspectator $i)] ]
get!ignored   = [ listfilter i $arg1 [! (isignored   $i)] ]
get!bots      = [ listfilter i $arg1 [! (isai        $i)] ]
get!dead      = [ listfilter i $arg1 [! (isdead      $i)] ]
get!lagged    = [ listfilter i $arg1 [! (islagged    $i)] ]


clamp  = [ max  $arg2 (min  $arg3 $arg1) ]
clampf = [ maxf $arg2 (minf $arg3 $arg1) ]

// truncate decimal points of given value to a specific number
precf = [ substr $arg1 0 (+ (strstr $arg1 .) (+ $arg2 1)) ]

// add string padding to the integer part of a given value
pad0 = [
	arg2 = (- $arg2 (strlen $arg1))
	if $arg3 [] [ arg3 = "0" ]
	if (<= $arg2 0) [ result $arg1 ] [
		concatword (loopconcatword n $arg2 [result $arg3]) $arg1
	]
]

// add string padding to the decimal part of a given value
pad0f = [
	arg2 = (- $arg2 (- (strlen $arg1) (+ (strstr $arg1 .) 1)))
	if $arg3 [] [ arg3 = "0" ]
	if (<= $arg2 0) [ result $arg1 ] [
		concatword $arg1 (loopconcatword n $arg2 [result $arg3])
	]
]

gcd = [ if (= $arg2 0) [ result $arg1 ] [ gcd $arg2 (modf $arg1 $arg2) ] ]
lcm = [ div (* $arg1 $arg2) (gcd $arg1 $arg2) ]


--  = [
	if $arg2 [] [ arg2 = 1 ]
	set $arg1 (-f $$arg1 $arg2)
	if (> $numargs 2) [ set $arg1 (maxf $$arg1 $arg3) ]
]
++  = [
	if $arg2 [] [ arg2 = 1 ]
	set $arg1 (+f $$arg1 $arg2)
	if (> $numargs 2) [ set $arg1 (minf $$arg1 $arg3) ]
]


chatsay     = [ inputcommand $arg1 [say     $commandbuf] "^f7[all]^f7"  s ]
chatteamsay = [ inputcommand $arg1 [sayteam $commandbuf] "^f8[team]^f7" s ]
chatexec    = [ inputcommand $arg1 [do      $commandbuf] "^f5[exec]^f7" s ]

togglemainmenu = [ || hidetopui [ toggleui "main" ] ]

// toggletaskbar  = [ UItaskbarvisible (! $UItaskbarvisible) ]

togglefullcon = [
	if (uivisible "fullconsole") [
	   if (> $fullconsize 50) [ fullconsize 35 ] [ hideui "fullconsole" ]
	] [ fullconsize 75 ; showui "fullconsole" ]
]

notepad = [
	if $numargs [ notepadpath = $arg1 ]
	showui "notepad"
]

nextspecmode = [
	if $specmode [
		specmode (mod (+ $specmode 1) 3)
	] [
		specmode (+ (> $getfollow -1) 1)
	]
]

dozoom = [
	if $zoomtoggle [
		zoom (? $zoom -1 1)
	] [
		zoom 1
		onrelease [ zoom -1 ]
	]
]




///////////////////////////////////////////////////////////////////////////////
//  Maplist Filters/Generators, Gamemode Shortcuts & EoU Functions           //
///////////////////////////////////////////////////////////////////////////////

defmaptable = [
	complex      51
	turbine_a2   51
	pinelake     123
	wintergreen  51
	azag         123
	nebula       51
	ot2          51
	lightspeed   123
	alphacorp    127
	reflection   127
	azag2        123
	steelribs    127
	desertwind   127
	waterworks   127
	sera         51
]

// mode: edit dm tdm ctf elim lms jugg infect
// mask: 0    1  2   4   8    16  32   64

// genmaplist MAPLIST VARNAME MODEMASK [alt condition]
//	genmaplist = [
//		if $arg1 [] [ arg1 = $mapmode_table ]
//		$arg2 = (loopconcat* m 2 (div (listlen $arg1) 2) [
//			@(? (> $numargs 3) [ if (arg4) [ at $arg1 $m ] ] [
//				if (|| [= $arg3 0] [& $arg3 (at $arg1 (+ $m 1))]) [ at $arg1 $m ]
//			])
//		])
//	]

// genmaplist VARNAME MODE_BITMASK MAPLIST
genmaplist = [
	if $arg3 [] [ arg3 = $defmaptable ]
	$arg1 = (loopconcat* m 2 (div (listlen $arg3) 2) [
		if (|| [= $arg2 0] [& $arg2 (at $arg3 (+ $m 1))]) [ at $arg3 $m ]
	])
]

genmaplist allmaps    0
genmaplist dmmaps     1
genmaplist tdmmaps    2
genmaplist ctfmaps    4
genmaplist elimmaps   8
genmaplist lmsmaps    16
genmaplist juggmaps   32
genmaplist infectmaps 64

genusermaps = [
	usermaps = []
	loopfiles m "data/map" "ogz" [
		if (< (indexof $allmaps $m) 0) [
			usermaps = (concat $usermaps $m)
		]
	]
]




demo = [ stopdemo ; if (mode -1) [ map $arg1 ] ]
complete demo .           dmo

do [
	local n ; n = 0
	looplist m $modelist [
		$m = [ if (mode @n) [ map $arg1 ] ]
		complete $m "data/map" ogz
		n = (+ $n 1)
	]
]
coop = [ if (mode 0) [ map $arg1 ] ]
edit = [ if (mode 0) [ map $arg1 ] ]

complete map  "data/map" ogz // global handle
complete coop "data/map" ogz // legacy handle
complete edit "data/map" ogz // legacy handle

copymapcfg = [
	if (&& $numargs [! $mainmenu]) [
		.cmc_from $arg1
		.cmc_to   (? (> $numargs 1) $arg2 $mapname)
		if (findfile (concatword "data/map/" $.cmc_from ".cfg")) [
			if (findfile (concatword "data/map/" $.cmc_to ".cfg")) [ showui "dialog_copycfg" ] [
				textfocus "#copymapcfg"
				textload (concatword "data/map/" $.cmc_from ".cfg")
				textsave (concatword "data/map/" $.cmc_to   ".cfg")
			]
		] [
			error (format "%1 ^f3: no such map config!" $.cmc_from)
			.cmc_from "" ; .cmc_to ""
		]
	]
]




///////////////////////////////////////////////////////////////////////////////
//  Player Follow Function                                                   //
///////////////////////////////////////////////////////////////////////////////

followplayer = [
	.followlist (get!spectator $listclients)
	if (&& $editing [listlen $.followlist]) [
		if (< (indexof $.followlist $.followcn) 0) [ .followcn (at $.followlist 0) ]
		if (= $.crosshairsize 0) [
			.crosshairsize $crosshairsize
			crosshairsize 0
			.followplayer 1
		]
		sleep 1 [ goto $.followcn ; followplayer ]
	] [
		crosshairsize $.crosshairsize
		.crosshairsize 0
		.followplayer 0
	]
]

follownext = [
	arg3 = (listlen $.followlist)
	if (&& $.followplayer $arg3) [
		.followcn (+ $arg3 (indexof $.followlist $.followcn) (? (>= $arg1 0) 1 -1))
		.followcn (at $.followlist (mod $.followcn $arg3))
	] arg2
]




///////////////////////////////////////////////////////////////////////////////
//  Misc Useful Functions                                                    //
///////////////////////////////////////////////////////////////////////////////

cmd = [
	arg5 = 0
	loopwhile i (listlen $arg1) [>= $arg5 0] [
		if ((at $arg1 $i)) [
			doargs (at $arg2 $i)
			arg5 = (+ $arg5 1)
		] [
			doargs (at $arg3 $i)
			arg5 = -1
		]
	]
	if (= $arg5 (listlen $arg1)) [ doargs $arg4 ]
]

// Loops through a given string's characters
// usage: /loopchar  VAR  "string"  [action]
loopchar = [
	loop $arg1 (strlen $arg2) [
		$arg1 = (substr $arg2 $$arg1 1)
		arg3
	]
]

// Subdivide a given list into smaller lists
// usage: /subdivlist  [list items here]  ITEMS-PER-DIV
subdivlist = [
	loopconcat* n $arg2 (ceil (divf (listlen $arg1) $arg2)) [
		escape (sublist $arg1 $n $arg2)
	]
]




///////////////////////////////////////////////////////////////////////////////
//  Crosshair Definitions -- WIP                                             //
///////////////////////////////////////////////////////////////////////////////

loadcrosshair "data/interface/crosshair/ally.png" 0 // ally
loadcrosshair "data/interface/crosshair/default.png"  1 // normal
loadcrosshair "data/interface/crosshair/default_hit.png" 2 // hit
loadcrosshair "data/interface/crosshair/d.png" // edit




///////////////////////////////////////////////////////////////////////////////
//  Hook Definitions                                                         //
///////////////////////////////////////////////////////////////////////////////

edittoggled = [
	if $editing [
		showui "edithud"
		if (! (uivisible "fullconsole")) [ showui "editvars" ]
	] [
		hideui "edithud"
		hideui "editvars"
		hideui "material"
		hideui "texture_browser"
		hideui "mapmodel_browser"
		hideui "geo_prefab"
	]
]

// XXX
mainmenutoggled = [
	if $mainmenu [
		hideui "scoreboard"
		music "menu.ogg"
	] [
		
	]
]

// helper UI to allow escaping advanced fields when
// clicking outside of the UI that they reside within
newui "KBhook" [
	uieschide 0
	if (getalias .UI_KBisoob) [
		uiallowinput 1
		uiclamp.e
		uipress    [ .UI_KBclean ]
		uiescpress [ .UI_KBclean ]
		uitarget
		uiclamp-e
	] [ uiallowinput 0 ]
	if (getalias debugruncodestack) [
		uiclamp.e
		uispace 0.01 0.1 [
			uialign 1 1
			uitext $runcodestack 1
		]
	]
] [] [ sleep 1 [ showui "KBhook" ] ]




///////////////////////////////////////////////////////////////////////////////
//  Smooth Music Looper                                                      //
///////////////////////////////////////////////////////////////////////////////

togglemusicloop = [
	local volslice = (divf $.musicvol 20)
	loop n 10 [
		sleep (* $n 25) [
			musicvol (max 0 (-f $musicvol $volslice))
		]
	]
	sleep 250 [
		music ""
		sleep (* $n 25) [
			musicvol (min 255 (+f $musicvol $volslice))
		]
		musicvol @musicvol
	]
]




///////////////////////////////////////////////////////////////////////////////
//  Startup Sanitization & Routines                                          //
///////////////////////////////////////////////////////////////////////////////

if $.followplayer [
	crosshairsize $.crosshairsize
	.crosshairsize 0
	.followplayer 0
]

showui "KBhook"
showui "welcome"
musicvol $.musicvol
genusermaps
